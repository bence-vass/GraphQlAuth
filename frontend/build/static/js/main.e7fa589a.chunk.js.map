{"version":3,"sources":["images/va-logo.svg","images/text.svg","images/react-grey.svg","images/jwt.svg","images/apollo.svg","images/graphql.svg","images/figill.svg","images/jwtFig.svg","images/apolloDiagram.svg","images/apolloCaching.png","images/queryexample.png","images/graphqlquery.png","components/Navbar.js","components/Fig.js","pages/Home.js","pages/Example.js","pages/Codes.js","pages/About.js","components/auth/Signup.js","pages/SignupPage.js","components/auth/Login.js","pages/LoginPage.js","pages/ProfilePage.js","pages/LogoutPage.js","components/Countdown.js","components/ExpirationDisplay.js","pages/about/JwtPage.js","pages/about/ApolloPage.js","pages/AboutPage.js","pages/ProfileUpdatePage.js","pages/about/DockerPage.js","pages/about/GraphqlPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","to","href","src","vaLogo","alt","Fig","props","style","fig","children","textStyle","Home","text","position","react","jwt","apollo","graphql","Component","Example","localStorage","getItem","Codes","transform","textAlign","listStyleType","margin","padding","target","id","file","About","CREATE_USER","gql","Signup","changeValue","val","state_name","setState","value","state","username","email","password","console","log","this","mutation","onCompleted","res","onError","err","createUser","data","loading","error","onSubmit","e","preventDefault","variables","type","placeholder","onChange","required","React","SignupPage","LOGIN","Login","redirect","setItem","tokenAuth","token","refreshToken","payload","exp","refreshExpiresIn","login","client","writeData","refreshExp","LoginPage","PROFILE","ProfilePage","query","refetch","updateQuery","me","firstName","lastName","onClick","LogoutPage","clear","clearStore","leftPad","number","targetLength","output","length","Counter","useState","count","setCount","setExp","Math","floor","Number","Date","useEffect","timer","setInterval","clearInterval","ExpirationDisplay","fetchPolicy","colSpan","COLORS","JwtPage","split","map","i","color","dummy","document","createElement","body","appendChild","select","execCommand","removeChild","copyToClipboard","window","open","jwtFig","ApolloPage","apolloDiagram","apolloCaching","AboutPage","UPDATE_PROFILE","ProfileUpdatePage","firstname","lastname","a","called","update","cache","user","updateProfile","writeQuery","DockerPage","GraphqlPage","example","App","path","exact","Boolean","location","hostname","match","REFRESH_TOKEN","refreshAccessToken","mutate","ERRORS_TO_REFRESH","link","HttpLink","uri","authMiddleware","ApolloLink","operation","forward","setContext","headers","authorization","tokenRefreshLink","graphQLErrors","networkError","includes","message","Observable","observe","then","catch","subscriber","next","bind","complete","subscribe","InMemoryCache","ApolloClient","from","onClearStore","onResetStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7fa589a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/va-logo.40bea301.svg\";","module.exports = __webpack_public_path__ + \"static/media/text.0d212e0d.svg\";","module.exports = __webpack_public_path__ + \"static/media/react-grey.9531e039.svg\";","module.exports = __webpack_public_path__ + \"static/media/jwt.b819a753.svg\";","module.exports = __webpack_public_path__ + \"static/media/apollo.e7a87bb6.svg\";","module.exports = __webpack_public_path__ + \"static/media/graphql.81b66a4f.svg\";","module.exports = __webpack_public_path__ + \"static/media/figill.63f18e4b.svg\";","module.exports = __webpack_public_path__ + \"static/media/jwtFig.fc6d1dc8.svg\";","module.exports = __webpack_public_path__ + \"static/media/apolloDiagram.ee7fbac9.svg\";","module.exports = __webpack_public_path__ + \"static/media/apolloCaching.d715e957.png\";","module.exports = __webpack_public_path__ + \"static/media/queryexample.20223a72.png\";","module.exports = __webpack_public_path__ + \"static/media/graphqlquery.e78bab8e.png\";","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport vaLogo from '../images/va-logo.svg';\n\nconst Navbar = () => {\n    return (\n        <ul className={'navbar'}>\n            <li><Link to={'/'}>Home</Link></li>\n            <li><Link to={'/example'}>Example</Link></li>\n            <li><Link to={'/codes'}>Codes</Link></li>\n            <li><Link to={'/about'}>About</Link></li>\n\n            <a href=\"https://bencevass.com/\"><img src={vaLogo} alt=\"Bence Vass\"/></a>\n        </ul>\n    );\n};\n\nexport default Navbar;","import React from 'react';\nimport fig from \"../images/figill.svg\";\n\nconst Fig = (props) => {\n    return (\n        <div className={'fig'} style={props.style}>\n            <img src={fig} alt=\"fig\"/>\n            {props.children ? <div className={'text'} style={props.textStyle}>{props.children}</div> : null}\n        </div>\n    );\n};\n\nexport default Fig;","import React, {Component} from 'react';\nimport text from '../images/text.svg';\nimport react from '../images/react-grey.svg';\nimport jwt from '../images/jwt.svg';\nimport apollo from '../images/apollo.svg';\nimport graphql from '../images/graphql.svg';\nimport Fig from \"../components/Fig\";\nimport {Link} from \"react-router-dom\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <div className={'home'}>\n                <div className={'text'}><img src={text} alt=\"GraphQAuth\"/></div>\n                <div className={'desc'}>\n                    Example project for JWT authentication in an SPA React.js app with Apollo through GraphQl API\n                </div>\n                <Fig style={{position: 'absolute'}}>\n                    Hello, It is a showcase example of the JWT Auth.\n                    <br/>\n                    Check out the demo on the <Link to={'/example'}>example page</Link>\n                    <br/>\n                    For more about the fundamentals, check out the <Link to={'/about'}>about page</Link>\n                </Fig>\n                <div className=\"tech\">\n                    <div className=\"techContainer\"><img src={react} alt=\"react\"/></div>\n                    <div className=\"techContainer\"><img src={jwt} alt=\"jwt\"/></div>\n                    <div className=\"techContainer\"><img src={apollo} alt=\"apollo\"/></div>\n                    <div className=\"techContainer\"><img src={graphql} alt=\"graphql\"/></div>\n                </div>\n                <Link to={'/about'}><h2>More about the tech</h2></Link>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\nimport {Redirect} from 'react-router-dom';\n\n\nclass Example extends Component {\n    render() {\n        return (\n            <div>\n                {localStorage.getItem('token')?\n                    <Redirect to={'/example/profile'}/>\n                    :\n                    <Redirect to={'/example/signup'}/>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Example;","import React, {Component} from 'react';\nimport Fig from \"../components/Fig\";\nimport Gist from \"react-gist\";\n\nclass Codes extends Component {\n\n//<script src=\"https://gist.github.com/bence-vass/3c363248e8dacfd7eaba9c5ddcc658b1.js\"></script>\n\n    render() {\n        return (\n            <div className={'codes'}>\n                <Fig style={{position: 'fixed'}} textStyle={{transform: 'translate(100%, -5%)'}}>\n                    <div style={{textAlign: 'left'}}>\n                        You can read here about:\n                        <ul style={{\n                            listStyleType: 'none',\n                            margin: '10px',\n                            padding: 0,\n                        }}>\n                            <a href=\"#prologue\"><li><b>The goal</b></li></a>\n                            <li>\n                                <b>Frontend:</b>\n                                <ul>\n                                    <a href=\"#auth\"><li>Authentication</li></a>\n                                    <a href=\"#store\"><li>Storing the tokens</li></a>\n                                    <a href=\"#refresh\"><li>Refreshing token</li></a>\n                                    <a href=\"#logout\"><li>Logout Method</li></a>\n                                    <a href=\"#expDisp\"><li>Expiration Display</li></a>\n                                    <a href=\"#refetch\"><li>Refetch Data</li></a>\n                                    <a href=\"#update\"><li>Update Data</li></a>\n                                </ul>\n                            </li>\n\n                            <li>\n                                <b>Backend:</b>\n                                <ul>\n                                    <li>Graphene-Django</li>\n                                </ul>\n                            </li>\n                            <li>\n                                <b>DevOps:</b>\n                                <ul>\n                                    <a href=\"#docker\"><li>Docker</li></a>\n                                </ul>\n                            </li>\n                        </ul>\n                    </div>\n                </Fig>\n                <a href=\"https://github.com/bence-vass/GraphQlAuth\" target=\"_blank\">\n                    <div><h3>Source: Github repo</h3></div>\n                </a>\n                <script src=\"https://gist.github.com/bence-vass/3c363248e8dacfd7eaba9c5ddcc658b1.js\"></script>\n                <div className={'prologue'} id={'prologue'}>\n                    I would like to write more about the difficulties of this project. The goal of this\n                    project was, that I could learn the usage of the GraphQl, the Apollo Client and the\n                    Graphene-Django package. Therefor please note, that this project is not a work of an\n                    expert, and there might be better solutions out there. But I am still sharing this with\n                    the hope, that others might learn about my mistakes and I can give some practical advise\n                    for other newcomers. If your not familiar with the following techs, I would recommend you\n                    to read the <a href=\"/about\">About Page</a> first, where I give a rough description about\n                    their fundamentals.\n                </div>\n                <div className={'frontend'}>\n                    <div>\n                        This is the most interesting part of this project after all, so take a look on it\n                        first.\n                    </div>\n                    <h2 id={'auth'}>Authentication</h2>\n                    <div>\n                        In terms of basic queries and mutations with the usage of the documentation it was\n                        pretty easy to learn it, so the first authentication process was not a difficulty.\n                        The client send a request the server response, it is simple, but for permission\n                        required data you need to send your authentication token in the request, that cause\n                        me the first issue. Despite the fact that it is well documented &nbsp;\n                        <a href=\"https://www.apollographql.com/docs/react/networking/authentication/#header\">\n                            (link here)</a>, at first I could not get the idea of the Apollo Links. So I definitely\n                        would recommend to read the\n                        <a href=\"https://www.apollographql.com/docs/link/overview/\"> concept guide (link here)</a>\n                            , first and only then start coding.\n                        <div>For those, who is interested in Graphene package, by default in the authorization\n                        the package use \"JWT\" + token for identification instead of \"Bearer\".</div>\n                    </div>\n                    <Gist id={'3c363248e8dacfd7eaba9c5ddcc658b1'} file={'index1.js'}/>\n\n                    <h2 id={'store'}>Storing the tokens</h2>\n                    <div>\n                        After the authentication, the client should store the data. As far as I am concerned one\n                        of the most popular why the do so, is storing them in the localStorage of the browser. After\n                        you leave the site it will remain stored, so even though the access token is expired, the\n                        refresh token can be used.\n                    </div>\n                    <h2 id={'refresh'}>Refreshing token</h2>\n                    <div>\n                        This is also a part of the project, which could not be understood unless you have read\n                        the <a href=\"https://www.apollographql.com/docs/link/overview/\">Apollo Link guide</a>.&nbsp;\n                        The main concept, that if the access token is expired, with the refresh token the client\n                        request a new one. I think one of the best way, when the client made a request and the server\n                        respond that signature token is expired, the client should make a token refresh call then\n                        try again with the original request. There is no need to refresh tokens right after they are\n                        expired, it is easier to catch errors and handle them.\n                        <br/>\n                        After a lot of research I found a code in a &nbsp;\n                        <a href=\"https://github.com/apollographql/apollo-link/issues/190#issuecomment-340736211\">\n                            github thread by anju-kosambi\n                        </a>, with a bit of modification I used it for the refresh process, which I found perfectly\n                        viable solution. With the &nbsp;\n                        <a href=\"https://www.apollographql.com/docs/link/links/error/\">apollo-link-error</a>\n                        &nbsp; you can catch the error and modify the request\n                        accordingly. Although I made it with this method, I would like to mention the there\n                        a community link for this purpose &nbsp;\n                        <a href=\"https://github.com/newsiberian/apollo-link-token-refresh\">\n                            (link here) called apollo-link-token-refresh\n                        </a>\n                        and at this point I can not emphasis enough the how useful could be reading through\n                        a documentation.\n                        <br/>\n                        This is the first time the I wrote authentication method, therefor it was not go\n                        without saying, for me how to handle different situation with token. For example\n                        what if the access token is invalid but the refresh is still live, what if the refresh\n                        is invalid. After bit of thinking I come to conclusion, that the app can not mess\n                        up with the stored data, if the token is invalid it is because of an auth server error or\n                        some kind of third party activity. In order to securely manage authentication data, I have\n                        found that the easiest way is to logout the user and clear the store.\n                    </div>\n                    <Gist id={'3c363248e8dacfd7eaba9c5ddcc658b1'} file={'index2.js'}/>\n\n                    <h2 id={'logout'}>Logout Method</h2>\n                    <div>\n                        The logout method clears the localStorage, clear the Apollo store, and set the values to the\n                        required value, then redirect to the home page.\n                    </div>\n                    <Gist id={'3c363248e8dacfd7eaba9c5ddcc658b1'} file={'index3.js'}/>\n\n                    <h2 id={'expDisp'}>Expiration Display</h2>\n                    <div>\n                        On each token refresh, Apollo updates the expiration time in its store. When the store is\n                        updated, Apollo automatically refetch the given queries and update the containing components.\n                        The components get the current time and expiration time and calculates the remaining interval\n                        in milliseconds, then set it as a state of the components.\n                    </div>\n                    <h2 id={'refetch'}>Refetch data</h2>\n                    <div>\n                        With the refetch button on profile page you can update apollo cache with the new\n                        server-data. You can see the request and response in your browser developer mode.\n                        If the access token has expired, you can see the three request, that have been made.\n                        The first is the user info query, which returns in this case an token expiration\n                        error. Secondly, the Apollo link catch the error and refresh the access token, and\n                        last but not least the original user query, but now with valid data.\n                    </div>\n                    <h2 id={'update'}>Update data</h2>\n                    <div>\n                        When you update your profile data, a mutation has been made, which tells the server,\n                        what kind of modification you intend to do. Normally you should than make a query\n                        to update the displayed information, but apollo provide an update function with\n                        each mutation, which makes it possible to modify data in the store without actual\n                        query, it updates the stored data and handle it as it is newly queried data and\n                        rerender the components accordingly.\n                        <br/>\n                        In this scenerio the project has been set up this way, that the logged in user\n                        can query its data without any identification in the GraphQl request, it  only\n                        idetentifies by the Authorization header, therefor there is no need of use ids\n                        in this case. I made the mistake that I requested id in the update mutation, there\n                        for it got an id in the store too. After the update, when I tried to refetch data\n                        it gives me error. I think it is a corner-case, but still worth to mention. This\n                        problem can be resolved with the identical fields in both the queries and mutations.\n                    </div>\n                    <Gist id={'3c363248e8dacfd7eaba9c5ddcc658b1'} file={'ProfileUpdate.js'}/>\n\n                    <h2 id={'docker'}>Docker</h2>\n                    <div>\n                        First of all, in developer mode the server would stop after it has successfuly started,\n                        inorder to prevent that, and make it run, you have to set <b>tty: true</b>. For hot reload\n                        you have to set the volumes, like it is in the docker code and also important, that you\n                        have to set <b>CHOKIDAR_USEPOLLING=true</b> in the envirement, unless it will not work.\n                    </div>\n                    <Gist id={'3c363248e8dacfd7eaba9c5ddcc658b1'} file={'docker-compose.dev.yml'}/>\n                    <div>\n                        For those <b>who use Mac for development</b>, please note that it is not exactly suitable\n                        for this purpose. I tried to use it with the following configuration, but the <b>latency made\n                        it unusable</b>. The request from the frontend toke from <b>15s to 40s to receive response</b>\n                        from the backend. It is being said, that it is some kind of sync error and it can be bypassed\n                        with the docker-sync library for mac, but I did not want to waste more time with this dead-end.\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Codes;","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport Fig from \"../components/Fig\";\n\nclass About extends Component {\n    render() {\n        return (\n            <div className={'about'}>\n                <div className=\"tech\">\n                    <Link to={'/about/apollo'}>Apollo Client</Link>\n                    <Link to={'/about/jwt'}>JWT</Link>\n                    <Link to={'/about/graphql'}>GraphQl</Link>\n                    <Link to={'/about/docker'}>Docker</Link>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default About;","import React from 'react';\nimport {gql} from 'apollo-boost';\nimport { Mutation } from '@apollo/react-components';\n\n\nconst CREATE_USER = gql`\n    mutation CreateUser(\n        $email: String!,\n        $username: String!,\n        $password: String!\n    ){\n        createUser(email: $email, username:$username,\n            password: $password){\n            user{\n                id\n                username\n            }\n        }\n\n    }\n`;\n\nclass Signup extends React.Component {\n    changeValue = (val, state_name) => {\n        this.setState({[state_name]: val.target.value})\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            email: '',\n            password: '',\n        }\n    }\n\n    render() {\n\n        console.log(this.state);\n        return (\n            <Mutation mutation={CREATE_USER} onCompleted={res=>{\n                console.log(res);\n                this.setState({\n                    email: '',\n                    password: '',\n                    username: '',\n                });\n            }} onError={err=>{\n                console.log(err)\n            }}\n            >\n                {(createUser, {data, loading, error})=>(\n                    <div>\n                        <h1>Sign up</h1>\n                        <form onSubmit={e => {\n                            e.preventDefault();\n                            createUser({\n                                variables: {\n                                    email: this.state.email,\n                                    password: this.state.password,\n                                    username: this.state.username,\n                                }\n                            });\n                        }}>\n                            <input type=\"text\" placeholder={'username'} value={this.state.username}\n                                   onChange={e => this.changeValue(e, 'username')} required/>\n                            <input type=\"password\" placeholder={'password'} value={this.state.password}\n                                   onChange={e => this.changeValue(e, 'password')} required/>\n                            <input type=\"email\" placeholder={'email'} value={this.state.email}\n                                   onChange={e => this.changeValue(e, 'email')} required/>\n                            <input type=\"submit\" value={\"Sign Up\"}/>\n                        </form>\n                    </div>\n                )}\n            </Mutation>\n        );\n    }\n}\n\nexport default Signup;","import React, {Component} from 'react';\nimport Signup from \"../components/auth/Signup\";\nimport Fig from \"../components/Fig\";\nimport {Link} from \"react-router-dom\";\n\nclass SignupPage extends Component {\n    render() {\n        return (\n            <div className={'signup'}>\n                <Fig>Please sign up or login on the left</Fig>\n                <Signup/>\n                <Link to={'/example/login'}><h2>Login</h2></Link>\n            </div>\n        );\n    }\n}\n\nexport default SignupPage;","import React from 'react';\n\nimport {gql} from 'apollo-boost';\nimport {Mutation} from '@apollo/react-components';\nimport {Redirect} from \"react-router-dom\";\n\n\nconst LOGIN = gql`\n    mutation Login($username: String!, $password: String!){\n        tokenAuth(username: $username, password: $password){\n            payload\n            token\n            refreshToken\n            refreshExpiresIn\n        }\n    }\n`;\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            redirect: null,\n        }\n    }\n\n    changeValue = (val, state_name) => {\n        this.setState({[state_name]: val.target.value})\n    };\n\n    render() {\n        if (this.state.redirect) {\n            return (<Redirect to={'/example/profile'}/>)\n        }\n        return (\n            <Mutation mutation={LOGIN} onCompleted={res => {\n                console.log(res);\n                localStorage.setItem('token', res.tokenAuth.token);\n                localStorage.setItem('refreshToken', res.tokenAuth.refreshToken);\n                localStorage.setItem('exp', res.tokenAuth.payload.exp);\n                localStorage.setItem('refreshExp', res.tokenAuth.refreshExpiresIn);\n\n                this.setState({redirect: true});\n            }}>\n                {(login, {data, loading, error, client}) => {\n                    if (data) {\n                        //console.log(data.tokenAuth.payload.exp);\n                        client.writeData({\n                            data: {\n                                exp: data.tokenAuth.payload.exp,\n                                refreshExp: data.tokenAuth.refreshExpiresIn,\n                            },\n                        });\n                    }\n                    return (\n                        <div>\n                            <h1>Login</h1>\n                            <form onSubmit={e => {\n                                e.preventDefault();\n                                login({\n                                    variables: {\n                                        username: this.state.username,\n                                        password: this.state.password,\n                                    },\n                                });\n                            }}>\n                                <input type=\"text\" placeholder={'username'} required\n                                       onChange={e => this.changeValue(e, 'username')}/>\n                                <input type=\"password\" placeholder={'password'} required\n                                       onChange={e => this.changeValue(e, 'password')}/>\n                                <input type=\"submit\" value={'login'}/>\n                            </form>\n                        </div>\n                    )\n                }}\n            </Mutation>\n        );\n    }\n}\n\nexport default Login;","import React, {Component} from 'react';\nimport Login from \"../components/auth/Login\";\nimport Fig from \"../components/Fig\";\nimport {Link} from \"react-router-dom\";\n\nclass LoginPage extends Component {\n    render() {\n        return (\n            <div className={'login'}>\n                <Fig>Please sign up or login on the left</Fig>\n                <Login/>\n                <Link to={'/example/signup'}><h2>Sign Up</h2></Link>\n\n            </div>\n        );\n    }\n}\n\nexport default LoginPage;","import React, {Component} from 'react';\nimport {gql} from 'apollo-boost';\nimport {Query} from 'react-apollo';\nimport {Link, Redirect} from \"react-router-dom\";\nimport Fig from \"../components/Fig\";\n\nconst PROFILE = gql`\n    query{\n        me{\n            username\n            isStaff\n            firstName\n            lastName\n            email\n        }\n    }\n`;\n\nclass ProfilePage extends Component {\n    render() {\n        return (\n            <Query query={PROFILE} onError={err=>{console.log('profile error')}}>\n                {({loading, error, data, updateQuery, refetch}) => {\n                    if(loading){\n                        return (\n                            <div>\n                                Loading...\n                            </div>\n                        )\n                    }\n                    if(error){\n                        return (<Redirect to={'logout'}/>)\n                    }\n\n                    return(\n                        <div className={'profile'}>\n                            <Fig>You can see your authentication tokens expiration down below</Fig>\n                            <h1>Profile</h1>\n                            <Link to={'/example/profile/update'}><h5>Update Profile</h5></Link>\n                            {data && data.me ? data.me.username : 'not yet'}\n                            <br/>\n                            {data.me.firstName ? data.me.firstName : 'not given'}\n                            <br/>\n                            {data.me.lastName ? data.me.lastName : 'not given'}\n                            <br/>\n                            {data.me.email ? data.me.email : 'not given'}\n                            <br/>\n                            <button onClick={()=>{refetch()}}>Refetch data</button>\n                            <br/>\n                            <Link to={'/example/logout'}>Logout</Link>\n                        </div>\n                    )\n                }\n                }\n            </Query>\n\n\n        );\n    }\n}\n\nexport default ProfilePage;","import React, {Component} from 'react';\nimport {ApolloConsumer} from \"@apollo/react-components\";\nimport {Redirect} from \"react-router-dom\";\n\n\nclass LogoutPage extends Component {\n    render() {\n        return (\n            <ApolloConsumer>\n                {client => {\n                    localStorage.clear();\n                    client.writeData({\n                        data: {\n                            exp: 0,\n                            refreshExp: 0\n                        }\n                    });\n                    client.clearStore();\n                    return (<Redirect to={'/example/login'}/>);\n                }}\n            </ApolloConsumer>\n        );\n    }\n}\n\nexport default LogoutPage;","import React, {useState, useEffect} from 'react';\n\nfunction leftPad(number, targetLength) {\n    let output = number + '';\n    while (output.length < targetLength) {\n        output = '0' + output;\n    }\n    return output;\n}\n\nfunction Counter (props) {\n    const [count, setCount] = useState(0);\n    const [exp, setExp] = useState(0);\n    //console.log(Number(now));\n    //console.log('State:',Number(exp));\n    //console.log('Props:',props.exp);\n    if(exp !== props.exp){\n        //console.log('change');\n        //console.log('exp time',Math.floor(Number(props.exp*1000)-Number(new Date())));\n        setExp(props.exp);\n        setCount(Math.floor((Number(props.exp*1000)-Number(new Date()))/1000));\n    }\n\n    useEffect(()=>{\n        const timer = count > 0 && setInterval(()=>{\n            //console.log(count);\n            setCount(count-1);\n        }, 1000);\n        return() => clearInterval(timer)\n    },[count]);\n    if(count <= 0){\n        //console.log('exp smaller');\n        return(<span>00 : 00</span>);\n    } else {\n        //console.log('exp bigger');\n        return(<span>\n            {leftPad(\n                Math.floor(count/60), 2)} : {leftPad(\n                    count-Math.floor(count/60)*60, 2)}</span>);\n    }\n\n    /*\n        if(props.exp === 0){\n            return(<span>0</span>)\n        } else {\n            return(<span>{count}</span>);\n        }\n    */\n\n\n}\nexport default Counter\n","import React, {Component} from 'react';\nimport gql from \"graphql-tag\";\nimport Counter from \"./Countdown\";\nimport {Query} from \"@apollo/react-components\";\n\nclass ExpirationDisplay extends Component {\n    render() {\n        return (\n            <Query query={gql`{exp refreshExp}`} fetchPolicy={'cache-only'}>\n                {({data})=>{\n                    if(data){\n                        return (\n                            <div className={'tokenDisplay'}>\n                                <table>\n                                    <thead>\n                                    <tr>\n                                        <th colSpan={2} className={'title'}><span>Expiration</span></th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    <tr>\n                                        <th><span className=\"text\">Access Token:</span></th>\n                                        <th><b><Counter exp={data.exp}/></b></th>\n                                    </tr>\n                                    <tr>\n                                        <th><span className=\"text\">Refresh Token:</span></th>\n                                        <th><b><Counter exp={data.refreshExp}/></b></th>\n                                    </tr>\n                                    </tbody>\n                                </table>\n\n\n                            </div>\n                        )\n                    }\n                    return null\n                }}\n            </Query>\n        );\n    }\n}\n\nexport default ExpirationDisplay;","import React from 'react';\nimport {Query} from \"@apollo/react-components\";\nimport {gql} from \"apollo-boost\";\nimport Fig from \"../../components/Fig\";\nimport jwtFig from \"../../images/jwtFig.svg\";\nconst COLORS = ['#fb015b', '#d63aff', '#00b9f1']\n\nfunction copyToClipboard(text) {\n    let dummy = document.createElement(\"textarea\");\n    // to avoid breaking orgain page when copying more words\n    // cant copy when adding below this code\n    // dummy.style.display = 'none'\n    document.body.appendChild(dummy);\n    //Be careful if you use texarea. setAttribute('value', value), which works with \"input\" does not work with \"textarea\". – Eduard\n    dummy.value = text;\n    dummy.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(dummy);\n}\n\nconst JwtPage = () => {\n    return (\n        <div>\n            <Fig>About the jwt</Fig>\n\n        <div className={'about-container'}>\n            <h2>JSON Web Tokens</h2>\n            <div>\n                <i>\"JSON Web Tokens are an open, industry standard RFC 7519\n                method for representing claims securely between two parties.\"\n                </i>\n            </div>\n            <div>This is your access token:</div>\n            <div className={'token'}>\n                <b>{localStorage.getItem('token') ?\n                    localStorage.getItem('token').split('.').map((e, i)=>(\n                        <span><span style={{color: COLORS[i] }}>{e}</span>{i !== 2 ? '.' : null}</span>\n                    ))\n                    :\n                    null\n                }</b>\n            </div>\n            <div>It has three parts: the header, which contains the algorithm and token type, the payload\n            which is the data it self, and the verifying signature.&nbsp;<a href=\"https://jwt.io/\">\n             You can check out the the decoded data on the official site of JWT\n            </a>\n            </div>\n            <button onClick={()=>{\n                if(localStorage.getItem('token')){\n                    copyToClipboard(localStorage.getItem('token'))\n                }\n                window.open('https://jwt.io/')\n\n            }}>Copy Token and Redirect to jwt.io</button>\n            <img src={jwtFig} alt=\"jwt\" className={'ill-img'}/>\n            <div>\n                In this experimental case you have significantly shorter token expiration time, for the\n                purpose of demonstration, but in real life scenario the access token lives about\n                15 min and the refresh token around a week.\n            </div>\n            <div>For more advanced security you can generate new refresh token with access token.\n            In this project, after the request, the server revoke the previous token and only with the\n            newly generated credentials can be the process repeated.</div>\n        </div>\n        </div>\n\n    );\n};\n\nexport default JwtPage;","import React from 'react';\nimport apolloDiagram from '../../images/apolloDiagram.svg'\nimport apolloCaching from '../../images/apolloCaching.png'\nimport Fig from \"../../components/Fig\";\n\nconst ApolloPage = () => {\n    return (\n        <div>\n        <Fig>If you are not familiar with Apollo Client please read this short description or\n            read the documentation, for better understanding.</Fig>\n        <div className={'about-container'}>\n            <h2>Apollo Client</h2>\n            <i>\"Apollo Client is a complete state management library for JavaScript apps. Simply write a GraphQL query,\n            and Apollo Client will take care of requesting and caching your data, as well as updating your UI.\"</i>\n            <img src={apolloDiagram} alt=\"apollo graphq\"/>\n            <div>\n                With Apollo you can query and mutate data, with the greatest ease, since you can use the\n                exact code that you use with GraphQl UI. In concept it is very different from Redux, but in\n                use it is pretty similar. It helps you to manage data through components, which makes Redux\n                in this case unnecessary, in my opinion.\n            </div>\n            <img src={apolloCaching} alt=\"apollo graphq\"/>\n            <a href=\"https://www.apollographql.com/docs/\"><div>\n                For more detailed description, please check out the official documentation (link here)\n            </div></a>\n        </div>\n        </div>\n    );\n};\n\nexport default ApolloPage;","import React from 'react';\nimport Fig from \"../components/Fig\";\n\nconst AboutPage = () => {\n    return (\n        <div>\n            <Fig>Here you can learn more about the stacks</Fig>\n            hello11\n        </div>\n    );\n};\n\nexport default AboutPage;","import React, {Component} from 'react';\nimport {gql} from 'apollo-boost';\nimport { Mutation, Query } from '@apollo/react-components';\nimport {Redirect} from 'react-router-dom';\n\nconst UPDATE_PROFILE = gql`\n    mutation UpdateProfile(\n        $firstname: String,\n        $lastname: String,\n        $email: String,\n    ){\n        updateProfile(firstName: $firstname, lastName: $lastname, email: $email){\n            user{\n                username\n                firstName\n                lastName\n                email\n            }\n        }\n    }\n`;\nconst PROFILE = gql`\n    query{\n        me{\n            username\n            isStaff\n            firstName\n            lastName\n            email\n        }\n    }\n`;\nclass ProfileUpdatePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstname: '',\n            lastname: '',\n            email: '',\n            redirect: false,\n        }\n    }\n    changeValue = (val, state_name) => {\n        this.setState({[state_name]: val.target.value})\n    };\n    render() {\n        return (\n            <div>\n                <Query query={PROFILE} onCompleted={async(res)=>{\n                    //console.log(res);\n                    await this.setState({\n                        firstname: res.me.firstName,\n                        lastname: res.me.lastName,\n                        email: res.me.email,\n                    });\n                    //console.log(this.state)\n                }}>\n                    {({data, called})=>{ return null }}\n                </Query>\n            <Mutation mutation={UPDATE_PROFILE} update={(cache, {\n                data:{\n                    updateProfile:{\n                        user\n                    }\n                }\n            }) => {\n                cache.writeQuery({query: PROFILE, data:{me: user}})\n            }}>\n                {(updateProfile, {data})=>{\n                    if(this.state.redirect){\n                        return <Redirect to={'/example/profile'}/>\n                    }\n\n                    return(\n                        <div>\n                            <form onSubmit={e=>{\n                                e.preventDefault();\n                                updateProfile({variables:{\n                                    firstname: this.state.firstname,\n                                    lastname: this.state.lastname,\n                                    email: this.state.email,\n                                    }});\n                                this.setState({redirect: true});\n                            }}>\n                                <input type=\"text\"\n                                       placeholder={'First name'}\n                                       value={this.state.firstname}\n                                       onChange={e => this.changeValue(e, 'firstname')}/>\n                                <input type=\"text\"\n                                       placeholder={'Last name'}\n                                       value={this.state.lastname}\n                                       onChange={e => this.changeValue(e, 'lastname')}/>\n                                <input type=\"email\"\n                                       placeholder={'Email address'}\n                                       value={this.state.email}\n                                       onChange={e => this.changeValue(e, 'email')}/>\n                                <input type=\"submit\" value={\"Update\"}/>\n\n                            </form>\n                        </div>\n                    )\n                }}\n            </Mutation>\n            </div>\n        );\n    }\n}\n\nexport default ProfileUpdatePage;","import React from 'react';\nimport Gist from \"react-gist\";\nimport Fig from \"../../components/Fig\";\n\nconst DockerPage = () => {\n    return (\n        <div>\n            <Fig></Fig>\n        <div className={'about-container'}>\n            <h2>Docker</h2>\n            <i><div>\"Docker is a platform for developers and sysadmins to build, run, and share\n                applications with containers. The use of containers to deploy applications is\n                called containerization. Containers are not new, but their use for easily deploying\n                applications is.\"</div></i>\n            <div>Docker can be useful for every kind of project in order to easily setup at all\n            environment. My first intention was, to dockerize the back- and frontend even in the\n            development state. </div>\n\n        </div>\n        </div>\n    );\n};\n\nexport default DockerPage;","import React from 'react';\nimport Fig from \"../../components/Fig\";\nimport example from '../../images/queryexample.png'\nimport query from '../../images/graphqlquery.png'\n\nconst GraphqlPage = () => {\n    return (\n        <div>\n            <Fig></Fig>\n            <div className={'about-container'}>\n                <h2>GraphQl</h2>\n                <i><div>\n                    \"GraphQL is a query language for APIs and a runtime for fulfilling those queries\n                    with your existing data. GraphQL provides a complete and understandable description\n                    of the data in your API, gives clients the power to ask for exactly what they need and\n                    nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\"\n                </div></i>\n                <img src={example} alt=\"qraphql\"/>\n                <div>\n                    I had experiences with RestAPI, but after using GraphQl, I do not see RestAPI as the best solution\n                    for backend-frontend communication. Despite the fact that, I did not make any measurements between\n                    these two in terms of computation demand and speed, but it is clear that the GraphQl is more\n                    capable with the now days standards. With the solution that you only query data, that you need,\n                    it is capable to sending significantly smaller requests and responses. After all, since everything\n                    about the UX, and some countries have exceedingly slow mobile data connection, it could be the\n                    best solution to increase user experience.\n                </div>\n                <img src={query} alt=\"graphql\"/>\n                <a href=\"https://graphql.org/learn/\"><div>\n                    You can check out the GraphQl site for more advanced description (link here)\n                </div></a>\n            </div>\n        </div>\n\n    );\n};\n\nexport default GraphqlPage;","import React from 'react';\nimport './style.scss';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./pages/Home\";\nimport Example from \"./pages/Example\";\nimport Codes from \"./pages/Codes\";\nimport About from \"./pages/About\";\nimport SignupPage from \"./pages/SignupPage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport ProfilePage from \"./pages/ProfilePage\";\nimport LogoutPage from \"./pages/LogoutPage\";\nimport ExpirationDisplay from \"./components/ExpirationDisplay\";\nimport JwtPage from \"./pages/about/JwtPage\";\nimport ApolloPage from \"./pages/about/ApolloPage\";\nimport AboutPage from \"./pages/AboutPage\";\nimport ProfileUpdatePage from \"./pages/ProfileUpdatePage\";\nimport DockerPage from \"./pages/about/DockerPage\";\nimport GraphqlPage from \"./pages/about/GraphqlPage\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                <Navbar/>\n                <Route path={'/about'}><About/></Route>\n                <Route path={'/example'}><ExpirationDisplay/></Route>\n                <Switch>\n                    <Route path={'/example/signup'}><SignupPage/></Route>\n                    <Route path={'/example/login'}><LoginPage/></Route>\n                    <Route path={'/example/logout'}><LogoutPage/></Route>\n                    <Route path={'/example/profile/update'}><ProfileUpdatePage/></Route>\n                    <Route path={'/example/profile'}><ProfilePage/></Route>\n                    <Route path={'/example'}><Example/></Route>\n                    <Route path={'/codes'}><Codes/></Route>\n                    <Route path={'/about/apollo'}><ApolloPage/></Route>\n                    <Route path={'/about/jwt'}><JwtPage/></Route>\n                    <Route path={'/about/graphql'}><GraphqlPage/></Route>\n                    <Route path={'/about/docker'}><DockerPage/></Route>\n                    <Route exact path={'/about'}><AboutPage/></Route>\n                    <Route exact path={'/'}><Home/></Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport {ApolloClient} from 'apollo-client';\nimport {HttpLink} from 'apollo-link-http';\nimport {ApolloLink, from, Observable} from 'apollo-link';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {onError} from \"apollo-link-error\";\nimport {gql} from 'apollo-boost';\n\nconst REFRESH_TOKEN = gql`\n    mutation RefreshToken($token: String!) {\n        refreshToken(refreshToken: $token) {\n            token\n            payload\n            refreshToken\n            refreshExpiresIn\n        }\n    }\n`;\nconst refreshAccessToken = async (refreshToken) => {\n    /*console.log('.............................................');\n    console.log('refresh auth token with token:');\n    console.log(refreshToken);\n    console.log('.............................................');*/\n    return client.mutate({\n        mutation: REFRESH_TOKEN,\n        variables: {token: refreshToken},\n    })\n};\nconst ERRORS_TO_REFRESH = [\n    //'Token is required',\n    'Signature has expired',\n];\n\nconst link = new HttpLink({uri: 'http://graphqlauth.work/graphql/'});\nconst authMiddleware = new ApolloLink((\n    operation,\n    forward) => {\n    if (localStorage.getItem('token')) {\n        operation.setContext({\n            headers: {\n                authorization: ('JWT ' + localStorage.getItem('token')),\n            }\n        });\n\n    }\n\n    return forward(operation)\n},);\nconst tokenRefreshLink = onError(({\n                                graphQLErrors,\n                                networkError,\n                                operation,\n                                forward,\n                            }) => {\n    if(graphQLErrors) {\n        for (let err of graphQLErrors) {\n            if (ERRORS_TO_REFRESH.includes(err.message)) {\n                if (localStorage.getItem('refreshToken')) {\n                    return new Observable(observe => {\n                        refreshAccessToken(localStorage.getItem('refreshToken')).then(res => {\n                            localStorage.setItem('token', res.data.refreshToken.token);\n                            localStorage.setItem('refreshToken', res.data.refreshToken.refreshToken);\n                            localStorage.setItem('exp', res.data.refreshToken.payload.exp);\n                            operation.setContext({\n                                headers: {\n                                    authorization: 'JWT ' + res.data.refreshToken.token\n                                }\n                            });\n                            client.writeData({\n                                data: {exp: res.data.refreshToken.payload.exp},\n                            });\n                        }).catch(err => {\n                            console.log(err);\n                            console.log('err in refresh');\n                        }).then(() => {\n                            const subscriber = {\n                                next: observe.next.bind(observe),\n                                error: observe.error.bind(observe),\n                                complete: observe.complete.bind(observe),\n                            };\n                            forward(operation).subscribe(subscriber)\n                        }).catch(err => {\n                            console.log('error at end of reauth');\n                            observe.error(err)\n                        })\n                    })\n                } else {\n\n                }\n            } else {\n                console.log('unhandled');\n                console.log(err);\n            }\n        }\n    }\n\n\n});\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n    cache: cache,\n    link: from([\n        tokenRefreshLink,\n        authMiddleware,\n        link,\n    ]),\n\n});\nlet data = {\n    exp: 0,\n    refreshExp: 0,\n};\nif(localStorage.getItem('exp') && localStorage.getItem('refreshExp')){\n    data = {\n        exp: localStorage.getItem('exp'),\n        refreshExp: localStorage.getItem('refreshExp'),\n    };\n}\n\ncache.writeData({data});\n\nclient.onClearStore(async () => await cache.writeData({data}));\nclient.onResetStore(async () => await cache.writeData({data}));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n    <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}